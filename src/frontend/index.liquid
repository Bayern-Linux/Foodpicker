<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Random Food Selector</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.16/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-200 min-h-screen flex items-center justify-center">
<div class="bg-white shadow p-6 rounded-lg mr-8">
    <h1 class="text-2xl font-bold mb-4">Random Food Selector</h1>
    <p class="mb-4">Not sure what to eat? Let us decide for you!</p>
    <div id="food-display" class="p-4 bg-gray-100 rounded text-center">
        <p class="text-xl" id="food-name-placeholder">Picked Food</p>
    </div>
    <button id="select-food" class="mt-4 bg-blue-500 text-white px-6 py-2 rounded hover:bg-blue-600">Select Food</button>

</div>
<div class="bg-white shadow p-6 rounded-lg mr-8">
    <h1 class="text-2xl font-bold mb-4">Weekly Food Selector</h1>
    <div id="weekly-foods" class="p-4 bg-gray-100 rounded">
        <!-- Meals will be displayed here -->
    </div>
    <button id="select-weekly-food" class="mt-4 bg-green-500 text-white px-6 py-2 rounded hover:bg-green-600">Select Weekly Meals</button>
    <button type="button" id="export-calendar" class="mt-6 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600">Export to Calendar</button>
</div>
<div class="bg-white shadow p-6 rounded-lg mt-6">
    <form id="food-form" class="mt-6">
        <label for="name" class="block font-medium text-gray-700">Name:</label>
        <input type="text" id="name" name="name" class="mt-1 p-1 block w-full rounded border-gray-300 shadow-sm">

        <label for="price" class="block font-medium text-gray-700 mt-4">Price:</label>
        <select id="price" name="price" class="mt-1 p-1 block w-full rounded border-gray-300 shadow-sm">
            <option value="Low">Low</option>
            <option value="Medium">Medium</option>
            <option value="High">High</option>
        </select>

        <label for="effort" class="block font-medium text-gray-700 mt-4">Effort:</label>
        <select id="effort" name="effort" class="mt-1 p-1 block w-full rounded border-gray-300 shadow-sm">
            <option value="Low">Low</option>
            <option value="Medium">Medium</option>
            <option value="High">High</option>
        </select>

        <label for="tag" class="block font-medium text-gray-700 mt-4">Tag:</label>
        <select id="tag" name="tag" class="mt-1 p-1 block w-full rounded border-gray-300 shadow-sm">
            <option value="Home">Home</option>
            <option value="Restaurant">Restaurant</option>
            <option value="Takeout">Takeout</option>
        </select>

        <button type="button" id="submit-button" class="mt-6 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Submit</button>
    </form>
</div>
<!-- Your HTML code remains unchanged -->

<script>
    document.getElementById("submit-button").addEventListener("click", async () => {
        const formData = new FormData(document.getElementById("food-form"));
        const data = {
            name: formData.get("name"),
            price: formData.get("price"),
            effort: formData.get("effort"),
            tag: formData.get("tag"),
        };
        try {
            const response = await fetch("/send-food-choice", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(data),
            });

            if (response.ok) {
                console.log("Data sent successfully");
                // Clear the form after successful submission
                document.getElementById("food-form").reset();
            } else {
                console.error("Failed to send data");
            }
        } catch (error) {
            console.error("An error occurred", error);
        }
    });

    document.getElementById("select-food").addEventListener("click", async () => {
        try {
            const response = await fetch("/get-food-choice", {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                },
            });

            if (response.ok) {
                const data = await response.json();
                const foodNamePlaceholder = document.getElementById("food-name-placeholder");
                foodNamePlaceholder.textContent = data.name;

            } else {
                console.error("Failed to fetch data");
            }
        } catch (error) {
            console.error("An error occurred", error);
        }
    });


    function getNextMonday() {
        const today = new Date();
        const daysUntilNextMonday = 1 + (7 - today.getDay()) % 7;
        const nextMonday = new Date(today.getTime() + daysUntilNextMonday * 24 * 60 * 60 * 1000);
        return nextMonday;
    }

    function formatDate(date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    }

    const nextMonday = getNextMonday();
    let weeklyData = []; // Store the fetched weekly data here

    const weeklyFoodsDisplay = document.getElementById("weekly-foods");
    const selectWeeklyButton = document.getElementById("select-weekly-food");


    selectWeeklyButton.addEventListener("click", async () => {
        try {
            const response = await fetch("/get-food-choice-week", {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                },
            });

            if (response.ok) {
                weeklyData = await response.json(); // Store the fetched data
                weeklyFoodsDisplay.innerHTML = ""; // Clear previous content

                // Loop through each meal and display them with dates
                for (let i = 0; i < weeklyData.length; i++) {
                    const meal = weeklyData[i];
                    const mealDate = new Date(nextMonday.getTime() + i * 24 * 60 * 60 * 1000);

                    const mealElement = document.createElement("p");
                    mealElement.textContent = `${mealDate.toDateString()}: ${meal.name}`;
                    weeklyFoodsDisplay.appendChild(mealElement);
                }

            } else {
                console.error("Failed to fetch weekly data");
            }
        } catch (error) {
            console.error("An error occurred", error);
        }
    });

    const exportButton = document.getElementById("export-calendar");
    exportButton.addEventListener("click", async () => {
        try {
            const icsContent = generateICSContent(weeklyData.map((meal, index) => ({
                id: index + 1,
                date: new Date(nextMonday.getTime() + index * 24 * 60 * 60 * 1000),
                name: meal.name,
            })));

            const blob = new Blob([icsContent], { type: "text/calendar;charset=utf-8" });
            const blobUrl = URL.createObjectURL(blob);

            const downloadLink = document.createElement("a");
            downloadLink.href = blobUrl;
            downloadLink.download = "calendar.ics";
            downloadLink.click();

            URL.revokeObjectURL(blobUrl);

        } catch (error) {
            console.error("An error occurred", error);
        }
    });

    function generateICSContent(events) {
        const icsLines = [
            "BEGIN:VCALENDAR",
            "VERSION:2.0",
            "PRODID:-//Random Food Selector//EN",
            "CALSCALE:GREGORIAN",
            "METHOD:PUBLISH"
        ];

        events.forEach(event => {
            icsLines.push("BEGIN:VEVENT");
            icsLines.push(`UID:${event.id}`);
            icsLines.push(`DTSTAMP:${formatICSDate(new Date())}`);
            icsLines.push(`DTSTART:${formatICSDate(event.date)}`);
            icsLines.push(`SUMMARY:${event.name}`);
            icsLines.push("END:VEVENT");
        });

        icsLines.push("END:VCALENDAR");
        return icsLines.join("\r\n");
    }

    function formatICSDate(date) {
        const year = date.getUTCFullYear();
        const month = padNumber(date.getUTCMonth() + 1);
        const day = padNumber(date.getUTCDate());
        const hours = padNumber(date.getUTCHours() +1);
        const minutes = padNumber(date.getUTCMinutes());
        const seconds = padNumber(date.getUTCSeconds());
        return `${year}${month}${day}T${hours}${minutes}${seconds}Z`;
    }

    function padNumber(number) {
        return number.toString().padStart(2, '0');
    }
</script>
</body>
</html>

